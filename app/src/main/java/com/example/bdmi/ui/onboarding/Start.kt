package com.example.bdmi.ui.onboarding

import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxHeight
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.rememberLazyListState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import com.example.bdmi.R
import com.example.bdmi.ui.composables.LoadingIndicator
import com.example.bdmi.ui.composables.home.MoviePoster
import com.example.bdmi.ui.theme.dimens
import kotlinx.coroutines.delay

@Composable
fun StartScreen(
    onLoginClick: () -> Unit,
    onRegisterClick: () -> Unit
) {
    val onboardingViewModel: OnboardingViewModel = hiltViewModel()
    val movies = onboardingViewModel.movies.collectAsState().value
    val scrollState = rememberLazyListState()

    // Carousel generated by ChatGPT
    // Auto-scroll effect
    LaunchedEffect(Unit) {
        while (true) {
            delay(40) // adjust speed here
            val nextIndex = (scrollState.firstVisibleItemScrollOffset + 2).coerceAtMost(Int.MAX_VALUE)
            scrollState.scrollToItem(scrollState.firstVisibleItemIndex, nextIndex)
        }
    }

    if (movies.isEmpty()) {
        LoadingIndicator()
    }
    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(MaterialTheme.colorScheme.background),
        contentAlignment = Alignment.TopCenter
    ) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(vertical = dimens.large3, horizontal = dimens.medium3),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Spacer(modifier = Modifier.fillMaxHeight(.05f))

            // Logo
            Image(
                painter = painterResource(id = R.drawable.bdmi_logo),
                contentDescription = "Logo",
                modifier = Modifier.size(250.dp)
            )

            Spacer(modifier = Modifier.height(dimens.medium1))

            // Infinite Auto-Scrolling Carousel
            LazyRow(
                state = scrollState,
                horizontalArrangement = Arrangement.spacedBy(12.dp),
                userScrollEnabled = false,
                modifier = Modifier.fillMaxHeight(.32f)
            ) {
                if (movies.isNotEmpty()) {
                    // Repeat items for infinite illusion
                    items(Int.MAX_VALUE) { index ->
                        val movie = movies[index % movies.size]
                        MoviePoster(
                            posterPath = movie.posterPath,
                            title = movie.title,
                            onClick = {}
                        )
                    }
                }
            }

            Spacer(modifier = Modifier.fillMaxHeight(.3f))

            // Buttons
            Column(
                verticalArrangement = Arrangement.spacedBy(dimens.medium3),
                horizontalAlignment = Alignment.CenterHorizontally,
                modifier = Modifier.padding(horizontal = dimens.large3),
            ) {
                Button(
                    onClick = { onLoginClick() },
                    shape = RoundedCornerShape(50),
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(55.dp)
                ) {
                    Text(text = "Login", style = MaterialTheme.typography.titleSmall)
                }

                OutlinedButton(
                    onClick = { onRegisterClick() },
                    shape = RoundedCornerShape(50),
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(55.dp),
                    border = BorderStroke(1.dp, MaterialTheme.colorScheme.primary)
                ) {
                    Text(text = "Register", style = MaterialTheme.typography.titleSmall)
                }
            }
        }
    }
}