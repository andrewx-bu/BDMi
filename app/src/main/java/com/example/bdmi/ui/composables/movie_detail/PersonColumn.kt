package com.example.bdmi.ui.composables.movie_detail

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.aspectRatio
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ChevronRight
import androidx.compose.material.icons.filled.Person
import androidx.compose.material3.HorizontalDivider
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.vector.rememberVectorPainter
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.Dp
import coil3.compose.AsyncImage
import coil3.request.ImageRequest
import coil3.request.crossfade
import com.example.bdmi.data.api.models.CastMember
import com.example.bdmi.data.api.models.CrewMember
import com.example.bdmi.data.utils.ImageURLHelper
import com.example.bdmi.ui.theme.dimens
import com.example.bdmi.ui.theme.uiConstants

// Map Cast and Crew to a generic Person
data class Person(
    val id: Int,
    val name: String,
    val character: String? = null,
    val imageUrl: String?,
    val onClick: () -> Unit
)

@Composable
fun CastSection(cast: List<CastMember>) {
    val items = cast.map { member ->
        Person(
            id = member.id,
            name = member.name,
            character = member.character,
            imageUrl = ImageURLHelper.getURL(member.profilePath),
            onClick = { /* TODO: navigate to Person Screen */ }
        )
    }

    PersonColumn(
        people = items,
        emptyMsg = "No cast data available"
    )
}

@Composable
fun CrewSection(crew: List<CrewMember>) {
    // Join duplicate crew members to prevent them from showing twice
    // Code generated by ChatGPT.
    val unique = remember(crew) {
        crew.groupBy { it.id }
            .map { (_, entries) ->
                val rep = entries.first()
                rep.id to (rep to entries.map { it.job }.distinct())
            }
    }

    val items = unique.map { (id, pair) ->
        val (person, jobs) = pair
        Person(
            id = id,
            name = person.name,
            character = jobs.joinToString(", "),
            imageUrl = ImageURLHelper.getURL(person.profilePath),
            onClick = { /* TODO: navigate to Person Screen */ }
        )
    }

    PersonColumn(
        people = items,
        emptyMsg = "No crew data available"
    )
}

@Composable
fun PersonColumn(
    people: List<Person>,
    emptyMsg: String,
    height: Dp = MaterialTheme.dimens.personColumnHeight
) {
    // No data available
    if (people.isEmpty()) {
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .height(height)
                .padding(horizontal = MaterialTheme.dimens.medium2)
        ) {
            Text(
                text = emptyMsg,
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onErrorContainer,
                textAlign = TextAlign.Center,
                modifier = Modifier
                    .fillMaxWidth()
                    .background(MaterialTheme.colorScheme.errorContainer)
            )
        }
        return
    }

    LazyColumn(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = MaterialTheme.dimens.medium2)
            .height(height)
    ) {
        items(people) { person ->
            HorizontalDivider(
                Modifier.padding(vertical = MaterialTheme.dimens.small2),
                color = MaterialTheme.colorScheme.secondary
            )
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(MaterialTheme.dimens.personRowHeight)
                    .clickable(onClick = person.onClick),
                verticalAlignment = Alignment.CenterVertically
            ) {
                // Portrait photo
                Box(
                    modifier = Modifier
                        .aspectRatio(MaterialTheme.uiConstants.posterAspectRatio)
                        .clip(RoundedCornerShape(MaterialTheme.dimens.small2))
                        .background(MaterialTheme.colorScheme.surfaceVariant),
                    contentAlignment = Alignment.Center
                ) {
                    AsyncImage(
                        model = ImageRequest.Builder(LocalContext.current)
                            .data(person.imageUrl)
                            .crossfade(true)
                            .build(),
                        placeholder = rememberVectorPainter(Icons.Default.Person),
                        error = rememberVectorPainter(Icons.Default.Person),
                        contentDescription = null,
                        contentScale = ContentScale.Crop
                    )
                }

                Spacer(Modifier.width(MaterialTheme.dimens.small3))

                // Name and character
                Column {
                    Text(
                        person.name,
                        style = MaterialTheme.typography.titleLarge,
                        color = MaterialTheme.colorScheme.inverseSurface
                    )
                    Spacer(Modifier.height(MaterialTheme.dimens.small1))
                    person.character?.let {
                        Text(
                            it,
                            style = MaterialTheme.typography.titleMedium,
                            color = MaterialTheme.colorScheme.inverseSurface
                        )
                    }
                }

                Spacer(Modifier.weight(1f))

                Icon(
                    imageVector = Icons.Default.ChevronRight,
                    contentDescription = null,
                    modifier = Modifier.size(MaterialTheme.dimens.iconMedium)
                )
            }
        }
        item {
            HorizontalDivider(
                Modifier.padding(vertical = MaterialTheme.dimens.small2),
                color = MaterialTheme.colorScheme.secondary
            )
        }
    }
}