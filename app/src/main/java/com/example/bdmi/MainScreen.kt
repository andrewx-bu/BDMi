package com.example.bdmi

import android.Manifest
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.animation.AnimatedContent
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.animation.fadeIn
import androidx.compose.animation.fadeOut
import androidx.compose.animation.slideInVertically
import androidx.compose.animation.slideOutVertically
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.RowScope
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.offset
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material.icons.filled.DarkMode
import androidx.compose.material.icons.filled.LightMode
import androidx.compose.material.icons.filled.Notifications
import androidx.compose.material.icons.rounded.Mic
import androidx.compose.material.icons.rounded.Stop
import androidx.compose.material3.Badge
import androidx.compose.material3.BadgedBox
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.FloatingActionButton
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.NavigationBar
import androidx.compose.material3.NavigationBarItem
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.material3.TopAppBarScrollBehavior
import androidx.compose.runtime.Composable
import androidx.compose.runtime.DisposableEffect
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.rotate
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.input.nestedscroll.nestedScroll
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.style.TextOverflow
import androidx.lifecycle.Observer
import androidx.navigation.NavGraph.Companion.findStartDestination
import androidx.navigation.NavHostController
import androidx.navigation.compose.currentBackStackEntryAsState
import androidx.navigation.compose.rememberNavController
import com.example.bdmi.data.utils.VoiceToTextParser
import com.example.bdmi.navigation.MainNestedNavGraph
import com.example.bdmi.navigation.MainRoutes
import com.example.bdmi.ui.composables.movie_detail.MenuButton
import com.example.bdmi.ui.theme.dimens

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun MainScreen(
    rootNavController: NavHostController,
    navController: NavHostController = rememberNavController(), // New nav controller for nested navigation
    sessionViewModel: SessionViewModel,
    voiceToTextParser: VoiceToTextParser
) {
    val currentRoute = navController.currentBackStackEntryAsState().value?.destination?.route
    // TODO: More elegant route checking
    val showOuterBar = currentRoute != null && (!currentRoute.startsWith("movie_detail/") && !currentRoute.startsWith("reviews/"))
    // TODO: Separate scroll state for top bars
    val scrollBehavior = TopAppBarDefaults.enterAlwaysScrollBehavior()

    val darkTheme = sessionViewModel.darkMode.collectAsState()

    // Voice to Text
    var canRecord by remember {
        mutableStateOf(false)
    }

    val recordAudioLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.RequestPermission(),
        onResult = { isGranted ->
            canRecord = isGranted
        }
    )

    LaunchedEffect(key1 = recordAudioLauncher) {
        recordAudioLauncher.launch(Manifest.permission.RECORD_AUDIO)
    }

    val state by voiceToTextParser.state.collectAsState()

    // Extracts the title from MovieDetail for the Top Bar to display
    // Generated by Deepseek AI.
    val titleState = remember { mutableStateOf("") }
    DisposableEffect(navController.currentBackStackEntry) {
        titleState.value = ""

        val observer = Observer<String> { newTitle ->
            titleState.value = newTitle
        }

        // Set up observer
        navController.currentBackStackEntry?.savedStateHandle
            ?.getLiveData<String>("movie_title")
            ?.observeForever(observer)

        // Clean up when effect is disposed (navigating away)
        onDispose {
            navController.currentBackStackEntry?.savedStateHandle
                ?.getLiveData<String>("movie_title")
                ?.removeObserver(observer)
        }
    }

    Scaffold(
        modifier = Modifier
            .fillMaxSize()
            .nestedScroll(scrollBehavior.nestedScrollConnection),
        topBar = {
            Box(Modifier.fillMaxWidth()) {
                // Hide outer top bar if onboarding or moving to full screen
                AnimatedVisibility(
                    visible = showOuterBar,
                    enter = fadeIn() + slideInVertically { -it },
                    exit = fadeOut() + slideOutVertically { -it }
                ) {
                    TopBar(
                        darkTheme = darkTheme.value,
                        onThemeClick = sessionViewModel::switchTheme,
                        onNotificationClick = {
                            navController.navigate(MainRoutes.Notifications.route) {
                                popUpTo(navController.graph.findStartDestination().id) {
                                    saveState = true
                                }
                                launchSingleTop = true
                                restoreState = true
                            }
                        }
                    )
                }
                AnimatedVisibility(
                    visible = !showOuterBar,
                    enter = fadeIn() + slideInVertically { -it },
                    exit = fadeOut() + slideOutVertically { -it }
                ) {
                    MovieDetailTopAppBar(
                        title = titleState.value,
                        onBackClick = { navController.popBackStack() },
                        scrollBehavior = scrollBehavior,
                        sessionViewModel = sessionViewModel
                    )
                }
            }
        },
        bottomBar = {
            AnimatedVisibility(
                visible = true,
                enter = fadeIn() + slideInVertically { it },
                exit = fadeOut() + slideOutVertically { it }
            ) {
                BottomBar(
                    currentRoute = currentRoute,
                    onItemClicked = { route: String ->
                        navController.navigate(route) {
                            popUpTo(navController.graph.findStartDestination().id)
                            launchSingleTop = true
                            restoreState = true
                        }
                    }
                )
            }
        },
        floatingActionButton = {
            if (currentRoute == "search") {
                FloatingActionButton(
                    onClick = {
                        if (state.isSpeaking) {
                            voiceToTextParser.stopListening()
                        } else {
                            voiceToTextParser.startListening()
                        }
                    },
                    containerColor = if (state.isSpeaking) {
                        MaterialTheme.colorScheme.tertiaryContainer
                    } else {
                        MaterialTheme.colorScheme.secondaryContainer
                    }
                ) {
                    AnimatedContent(targetState = state.isSpeaking) { isSpeaking ->
                        if (isSpeaking) {
                            Icon(imageVector = Icons.Rounded.Stop, contentDescription = null)
                        } else {
                            Icon(imageVector = Icons.Rounded.Mic, contentDescription = null)
                        }
                    }
                }
            }
        }
    ) { padding ->
        Box(
            modifier = Modifier
                .padding(padding)
                .background(MaterialTheme.colorScheme.background)
        ) {
            MainNestedNavGraph(
                rootNavController = rootNavController,
                navController = navController,
                sessionViewModel = sessionViewModel,
                voiceToTextParser = voiceToTextParser
            )
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun TopBar(
    darkTheme: Boolean,
    onThemeClick: () -> Unit,
    onNotificationClick: () -> Unit
) {
    val rotation by animateFloatAsState(
        targetValue = if (darkTheme) 180f else 0f,
        label = "Theme Rotation"
    )

    // TODO: Top Bar States
    TopAppBar(
        title = {
            Image(
                painter = painterResource(id = R.drawable.logo),
                contentDescription = "BDMi",
                modifier = Modifier
                    .size(dimens.logoSizeMedium)
                    .clip(RoundedCornerShape(dimens.small3))
            )
        },
        actions = {
            BadgedBox(
                badge = {
                    Badge(
                        containerColor = MaterialTheme.colorScheme.tertiaryContainer,
                        contentColor = MaterialTheme.colorScheme.onTertiaryContainer,
                        modifier = Modifier
                            .size(dimens.notificationBadgeSize)
                            .offset(
                                x = -dimens.small3,
                                y = dimens.small2
                            )
                    ) {
                        // TODO: Implement Notifications #
                        Text("9")
                    }
                }
            ) {
                IconButton(onClick = onNotificationClick) {
                    Icon(
                        imageVector = Icons.Default.Notifications,
                        contentDescription = "Notifications",
                        tint = MaterialTheme.colorScheme.secondary,
                        modifier = Modifier.size(dimens.iconMedium)
                    )
                }
            }
            Spacer(Modifier.width(dimens.medium3))

            IconButton(onClick = onThemeClick) {
                Icon(
                    imageVector = if (darkTheme) Icons.Default.LightMode else Icons.Default.DarkMode,
                    contentDescription = "Toggle Theme",
                    tint = MaterialTheme.colorScheme.secondary,
                    modifier = Modifier
                        .rotate(rotation)
                        .size(dimens.iconMedium)
                )
            }

            Spacer(Modifier.width(dimens.medium3))
        },
        colors = TopAppBarDefaults.topAppBarColors(
            containerColor = Color.Transparent
        ),
        modifier = Modifier.height(dimens.topBarHeight)
    )
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun MovieDetailTopAppBar(
    title: String,
    onBackClick: () -> Unit,
    scrollBehavior: TopAppBarScrollBehavior,
    sessionViewModel: SessionViewModel
) {
    TopAppBar(
        title = {
            Box(
                modifier = Modifier.fillMaxSize(),
                contentAlignment = Alignment.Center
            ) {
                Text(
                    text = title,
                    style = MaterialTheme.typography.headlineSmall,
                    color = MaterialTheme.colorScheme.secondary,
                    overflow = TextOverflow.Ellipsis,
                    maxLines = 1
                )
            }
        },
        navigationIcon = {
            IconButton(
                onClick = onBackClick,
                modifier = Modifier
            ) {
                Icon(
                    imageVector = Icons.AutoMirrored.Filled.ArrowBack,
                    contentDescription = "Back",
                    tint = MaterialTheme.colorScheme.secondary,
                )
            }
        },
        actions = {
            MenuButton(sessionViewModel)
        },
        colors = TopAppBarDefaults.topAppBarColors(
            containerColor = Color.Transparent,
            scrolledContainerColor = Color.Transparent
        ),
        scrollBehavior = scrollBehavior
    )
}

@Composable
fun BottomBar(currentRoute: String?, onItemClicked: (String) -> Unit) {
    val screens = listOf(
        MainRoutes.Home,
        MainRoutes.Search,
        MainRoutes.Watchlists,
        MainRoutes.Profile
    )

    NavigationBar(
        modifier = Modifier.height(dimens.bottomBarHeight),
        containerColor = MaterialTheme.colorScheme.surfaceContainerHigh
    ) {
        screens.forEach { screen ->
            AddItem(
                screen = screen,
                isSelected = currentRoute == screen.route,
                onItemClicked = onItemClicked
            )
        }
    }
}

@Composable
fun RowScope.AddItem(
    screen: MainRoutes,
    isSelected: Boolean,
    onItemClicked: (String) -> Unit
) {
    val iconColor = if (isSelected) {
        MaterialTheme.colorScheme.primary
    } else {
        MaterialTheme.colorScheme.secondary
    }

    NavigationBarItem(
        icon = {
            Icon(
                imageVector = screen.getIcon(),
                contentDescription = screen.route,
                tint = iconColor
            )
        },
        selected = isSelected,
        onClick = { onItemClicked(screen.route) },
        modifier = Modifier.offset(y = dimens.small2)
    )
}
